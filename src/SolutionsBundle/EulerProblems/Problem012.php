<?php

namespace SolutionsBundle\EulerProblems;

use SolutionsBundle\EulerProblems\EulerProblem;
use MathFunctionsBundle\Functions\BasicFunctions;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
 * first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 *   1: 1
 *   3: 1,3
 *   6: 1,2,3,6
 *  10: 1,2,5,10
 *  15: 1,3,5,15
 *  21: 1,3,7,21
 *  28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 *
 * @author threadhack <threadhack@gmail.com>
 * @created 2012-03-11
 * @link http://projecteuler.net/index.php?section=problems&id=12
 */
class Problem012 implements EulerProblem
{
	/* @var int */
	const CEILING = 13000;

	/**
	 * @param int $start
	 * @param int $total
	 * @return int
	 */
	public function solve($start = 1, $total = 0)
	{
		$retval = -1;
		$factor_me = $total;
		$i = $start;

		while ($i < self::CEILING) {
			$factor_me += $i;
			$factors = count(BasicFunctions::getFactors($factor_me));

			if ($factors >= 500) {
				$retval = $factor_me;
				break;
			}

			$i+=1;
		}

		return $retval;
	}
}
